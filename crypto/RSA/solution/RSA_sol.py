from sage.all import *
from Crypto.Util.number import long_to_bytes


def nth_root(x, n):
   # Start with some reasonable bounds around the nth root.
   upper_bound = 1
   while upper_bound ** n <= x:
      upper_bound *= 2
   lower_bound = upper_bound // 2
   # Keep searching for a better result as long as the bounds make sense.
   while lower_bound < upper_bound:
      mid = (lower_bound + upper_bound) // 2
      mid_nth = mid ** n
      if lower_bound < mid and mid_nth < x:
         lower_bound = mid
      elif upper_bound > mid and mid_nth > x:
         upper_bound = mid
      else:
         # Found perfect nth root.
         return mid
   return mid + 1

Modulus = [5891075467360146252967327853805515493969737511132484706563682766924028913793714143147115445113945343394759076502348696516919877303361155161761660526598239, 8120760422302899778195862198151439838642164055797186875060101247702943996073704963429318808585212707626626403291777700725527560861551518246396431852294857, 8815667475597700425402483994207578779024779340009926098816238098249369038631773972776159883295743325670101852979326390388353511391956768010912115608693461, 8077260521592493929641778168719345700985100612836793128444027852486686515209537510873934132052299789453601595261225664243519668297736276921931376041837427, 11652557727284007707954881634789322197330056039993161702976240629076673694449896010288400398349717701818314219251959376042201160107929730027589291426042379, 5636093446775990037764641469223518375387194380745980054471608043520650309051088240377130539132945357200813460193261766670019351119403256178584240081003341, 8588942726943971783515877719581860398934113463391732997520207083585777710796553469778913660330024455775921008994993836848177114764087183086758533640138563, 7330695008377299680628703362124741866900793067894756746759457202040413507254578929977381693140722518774883427911210023025760641659736724439825799597944513, 8041961616476967085612678635966412380858733597791936347064432798601367027081256882575681185591703270206278069512375335940238692415311991374338696029978409, 6361214765960950647723144206718934803874370177903281969381317041655810612115530159395423837059377731372796426694720640853280135351247963271312109153703381]
Exponents = [17, 3, 3, 17, 17, 17, 3, 17, 3, 17]
Enc = [5147552366342611931262663989988838018254715847222599841755763105839792396147771445610467839034570663106590696038134196144464830480943270718157492442030709, 5267027989066537565812210684130990193616402213246191264336409925493581347737942174035812332011202506217268720212231819873365915288368083612242140636901827, 2710106490999358548346275841814056426479880177927794631549973782474415034922280216071766235831932151458299229642304602256882289771459739144056378461877903, 1163810330310754814117568955996052006367008071656631735344601508591385592302070344670510185501867418374915347549597357414293477808294673682102708244545413, 6930020253384624315495254401848836920010659768834486791121315829109843169737605679747532495185090183229396589914729552970228640481722043389717366038283568, 3484706113708888490293725661093998247645522659990064334454538598709965006703045541386565052583006882077409998851520199336103129159726633191868796908417875, 3620918578802417075175415002658580527198084587213242064242326221039774346391911148064078043335937037548482108148453416812966545909888659047338128071754979, 3589105043160958228003595249625914141254564873588831453502602249983628752344707507331859617436062925195799547288293576212977701638414477502957062428288046, 2903409979972714276082343026866941718176157756217894700530264462198612172446636632930054858479850911643479595905964261796072662287784784194803540323054151, 1266172582574718476995765419311668587326298179533812847133326753023065145909884862238124404321200829213438651011135137025280244383573106747710087807601568]
"""
the same message is encrypted several times, so after googling you will find
a famous vulnerability that use The Chinese Reminder Theorem to find the plaintext
in this case , so it suffices to pick the encrypted flag with the exponent 3 then apply 
CRT to find  the value of flag**3 and its cubic root is the desired flag
for more details : https://security.stackexchange.com/questions/2335/should-rsa-public-exponent-be-only-in-3-5-17-257-or-65537-due-to-security-c/2339#2339
"""
Ns = [Modulus[1],Modulus[2],Modulus[6]]
Cs = [Enc[1],Enc[2],Enc[6]]
c = crt(Cs, Ns)
flag = nth_root(c,3)

print(long_to_bytes(flag))

